/**
 * Generated by orval v7.2.0 🍺
 * Do not edit manually.
 * Vedge API
 * 암표 방지 티켓 예매 서비스 Vedge API 문서
 * OpenAPI spec version: 1.0
 */
import {
  createMutation
} from '@tanstack/svelte-query'
import type {
  CreateMutationOptions,
  CreateMutationResult,
  MutationFunction
} from '@tanstack/svelte-query'
import type {
  UploadControllerUploadMultipleFilesBody,
  UploadControllerUploadPosterBody,
  UploadControllerUploadTicketBody
} from '../../schemas'
import { customInstance } from '../../mutator/axios';
import type { ErrorType, BodyType } from '../../mutator/axios';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * 공연 포스터 이미지를 업로드합니다. 최대 5MB, png/jpeg/jpg 형식만 허용됩니다.
 * @summary 포스터 이미지 업로드
 */
export const uploadControllerUploadPoster = (
    uploadControllerUploadPosterBody: BodyType<UploadControllerUploadPosterBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      const formData = new FormData();
if(uploadControllerUploadPosterBody.file !== undefined) {
 formData.append('file', uploadControllerUploadPosterBody.file)
 }

      return customInstance<void>(
      {url: `/upload/poster`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData
    },
      options);
    }
  


export const getUploadControllerUploadPosterMutationOptions = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:CreateMutationOptions<Awaited<ReturnType<typeof uploadControllerUploadPoster>>, TError,{data: BodyType<UploadControllerUploadPosterBody>}, TContext>, request?: SecondParameter<typeof customInstance>}
): CreateMutationOptions<Awaited<ReturnType<typeof uploadControllerUploadPoster>>, TError,{data: BodyType<UploadControllerUploadPosterBody>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof uploadControllerUploadPoster>>, {data: BodyType<UploadControllerUploadPosterBody>}> = (props) => {
          const {data} = props ?? {};

          return  uploadControllerUploadPoster(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UploadControllerUploadPosterMutationResult = NonNullable<Awaited<ReturnType<typeof uploadControllerUploadPoster>>>
    export type UploadControllerUploadPosterMutationBody = BodyType<UploadControllerUploadPosterBody>
    export type UploadControllerUploadPosterMutationError = ErrorType<void>

    /**
 * @summary 포스터 이미지 업로드
 */
export const createUploadControllerUploadPoster = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:CreateMutationOptions<Awaited<ReturnType<typeof uploadControllerUploadPoster>>, TError,{data: BodyType<UploadControllerUploadPosterBody>}, TContext>, request?: SecondParameter<typeof customInstance>}
): CreateMutationResult<
        Awaited<ReturnType<typeof uploadControllerUploadPoster>>,
        TError,
        {data: BodyType<UploadControllerUploadPosterBody>},
        TContext
      > => {

      const mutationOptions = getUploadControllerUploadPosterMutationOptions(options);

      return createMutation(mutationOptions);
    }
    /**
 * 공연 티켓 이미지를 업로드합니다.
 * @summary 티켓 이미지 업로드
 */
export const uploadControllerUploadTicket = (
    uploadControllerUploadTicketBody: BodyType<UploadControllerUploadTicketBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      const formData = new FormData();
if(uploadControllerUploadTicketBody.file !== undefined) {
 formData.append('file', uploadControllerUploadTicketBody.file)
 }

      return customInstance<void>(
      {url: `/upload/ticket`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData
    },
      options);
    }
  


export const getUploadControllerUploadTicketMutationOptions = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:CreateMutationOptions<Awaited<ReturnType<typeof uploadControllerUploadTicket>>, TError,{data: BodyType<UploadControllerUploadTicketBody>}, TContext>, request?: SecondParameter<typeof customInstance>}
): CreateMutationOptions<Awaited<ReturnType<typeof uploadControllerUploadTicket>>, TError,{data: BodyType<UploadControllerUploadTicketBody>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof uploadControllerUploadTicket>>, {data: BodyType<UploadControllerUploadTicketBody>}> = (props) => {
          const {data} = props ?? {};

          return  uploadControllerUploadTicket(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UploadControllerUploadTicketMutationResult = NonNullable<Awaited<ReturnType<typeof uploadControllerUploadTicket>>>
    export type UploadControllerUploadTicketMutationBody = BodyType<UploadControllerUploadTicketBody>
    export type UploadControllerUploadTicketMutationError = ErrorType<void>

    /**
 * @summary 티켓 이미지 업로드
 */
export const createUploadControllerUploadTicket = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:CreateMutationOptions<Awaited<ReturnType<typeof uploadControllerUploadTicket>>, TError,{data: BodyType<UploadControllerUploadTicketBody>}, TContext>, request?: SecondParameter<typeof customInstance>}
): CreateMutationResult<
        Awaited<ReturnType<typeof uploadControllerUploadTicket>>,
        TError,
        {data: BodyType<UploadControllerUploadTicketBody>},
        TContext
      > => {

      const mutationOptions = getUploadControllerUploadTicketMutationOptions(options);

      return createMutation(mutationOptions);
    }
    /**
 * 최대 10개의 파일을 한 번에 업로드합니다.
 * @summary 다중 파일 업로드
 */
export const uploadControllerUploadMultipleFiles = (
    uploadControllerUploadMultipleFilesBody: BodyType<UploadControllerUploadMultipleFilesBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      const formData = new FormData();
if(uploadControllerUploadMultipleFilesBody.files !== undefined) {
 uploadControllerUploadMultipleFilesBody.files.forEach(value => formData.append('files', value));
 }

      return customInstance<void>(
      {url: `/upload/multiple`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData
    },
      options);
    }
  


export const getUploadControllerUploadMultipleFilesMutationOptions = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:CreateMutationOptions<Awaited<ReturnType<typeof uploadControllerUploadMultipleFiles>>, TError,{data: BodyType<UploadControllerUploadMultipleFilesBody>}, TContext>, request?: SecondParameter<typeof customInstance>}
): CreateMutationOptions<Awaited<ReturnType<typeof uploadControllerUploadMultipleFiles>>, TError,{data: BodyType<UploadControllerUploadMultipleFilesBody>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof uploadControllerUploadMultipleFiles>>, {data: BodyType<UploadControllerUploadMultipleFilesBody>}> = (props) => {
          const {data} = props ?? {};

          return  uploadControllerUploadMultipleFiles(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UploadControllerUploadMultipleFilesMutationResult = NonNullable<Awaited<ReturnType<typeof uploadControllerUploadMultipleFiles>>>
    export type UploadControllerUploadMultipleFilesMutationBody = BodyType<UploadControllerUploadMultipleFilesBody>
    export type UploadControllerUploadMultipleFilesMutationError = ErrorType<void>

    /**
 * @summary 다중 파일 업로드
 */
export const createUploadControllerUploadMultipleFiles = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:CreateMutationOptions<Awaited<ReturnType<typeof uploadControllerUploadMultipleFiles>>, TError,{data: BodyType<UploadControllerUploadMultipleFilesBody>}, TContext>, request?: SecondParameter<typeof customInstance>}
): CreateMutationResult<
        Awaited<ReturnType<typeof uploadControllerUploadMultipleFiles>>,
        TError,
        {data: BodyType<UploadControllerUploadMultipleFilesBody>},
        TContext
      > => {

      const mutationOptions = getUploadControllerUploadMultipleFilesMutationOptions(options);

      return createMutation(mutationOptions);
    }
    