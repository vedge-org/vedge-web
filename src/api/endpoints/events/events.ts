/**
 * Generated by orval v7.2.0 üç∫
 * Do not edit manually.
 * Vedge API
 * ÏïîÌëú Î∞©ÏßÄ Ìã∞Ïºì ÏòàÎß§ ÏÑúÎπÑÏä§ Vedge API Î¨∏ÏÑú
 * OpenAPI spec version: 1.0
 */
import {
  createInfiniteQuery,
  createMutation,
  createQuery
} from '@tanstack/svelte-query'
import type {
  CreateInfiniteQueryOptions,
  CreateInfiniteQueryResult,
  CreateMutationOptions,
  CreateMutationResult,
  CreateQueryOptions,
  CreateQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey
} from '@tanstack/svelte-query'
import type {
  CreateEventDto,
  EventsControllerFindAllParams,
  EventsControllerGetUpcomingParams,
  UpdateEventDto
} from '../../schemas'
import { customInstance } from '../../mutator/axios';
import type { ErrorType, BodyType } from '../../mutator/axios';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary Ïù¥Î≤§Ìä∏ ÏÉùÏÑ±
 */
export const eventsControllerCreate = (
    createEventDto: BodyType<CreateEventDto>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<void>(
      {url: `/events`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createEventDto
    },
      options);
    }
  


export const getEventsControllerCreateMutationOptions = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:CreateMutationOptions<Awaited<ReturnType<typeof eventsControllerCreate>>, TError,{data: BodyType<CreateEventDto>}, TContext>, request?: SecondParameter<typeof customInstance>}
): CreateMutationOptions<Awaited<ReturnType<typeof eventsControllerCreate>>, TError,{data: BodyType<CreateEventDto>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof eventsControllerCreate>>, {data: BodyType<CreateEventDto>}> = (props) => {
          const {data} = props ?? {};

          return  eventsControllerCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type EventsControllerCreateMutationResult = NonNullable<Awaited<ReturnType<typeof eventsControllerCreate>>>
    export type EventsControllerCreateMutationBody = BodyType<CreateEventDto>
    export type EventsControllerCreateMutationError = ErrorType<void>

    /**
 * @summary Ïù¥Î≤§Ìä∏ ÏÉùÏÑ±
 */
export const createEventsControllerCreate = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:CreateMutationOptions<Awaited<ReturnType<typeof eventsControllerCreate>>, TError,{data: BodyType<CreateEventDto>}, TContext>, request?: SecondParameter<typeof customInstance>}
): CreateMutationResult<
        Awaited<ReturnType<typeof eventsControllerCreate>>,
        TError,
        {data: BodyType<CreateEventDto>},
        TContext
      > => {

      const mutationOptions = getEventsControllerCreateMutationOptions(options);

      return createMutation(mutationOptions);
    }
    /**
 * @summary Ïù¥Î≤§Ìä∏ Î™©Î°ù Ï°∞Ìöå
 */
export const eventsControllerFindAll = (
    params: EventsControllerFindAllParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/events`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getEventsControllerFindAllQueryKey = (params: EventsControllerFindAllParams,) => {
    return [`/events`, ...(params ? [params]: [])] as const;
    }

    
export const getEventsControllerFindAllInfiniteQueryOptions = <TData = Awaited<ReturnType<typeof eventsControllerFindAll>>, TError = ErrorType<unknown>>(params: EventsControllerFindAllParams, options?: { query?:CreateInfiniteQueryOptions<Awaited<ReturnType<typeof eventsControllerFindAll>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getEventsControllerFindAllQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof eventsControllerFindAll>>> = ({ signal }) => eventsControllerFindAll(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as CreateInfiniteQueryOptions<Awaited<ReturnType<typeof eventsControllerFindAll>>, TError, TData> & { queryKey: QueryKey }
}

export type EventsControllerFindAllInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof eventsControllerFindAll>>>
export type EventsControllerFindAllInfiniteQueryError = ErrorType<unknown>


/**
 * @summary Ïù¥Î≤§Ìä∏ Î™©Î°ù Ï°∞Ìöå
 */

export function createEventsControllerFindAllInfinite<TData = Awaited<ReturnType<typeof eventsControllerFindAll>>, TError = ErrorType<unknown>>(
 params: EventsControllerFindAllParams, options?: { query?:CreateInfiniteQueryOptions<Awaited<ReturnType<typeof eventsControllerFindAll>>, TError, TData>, request?: SecondParameter<typeof customInstance>}

  ): CreateInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getEventsControllerFindAllInfiniteQueryOptions(params,options)

  const query = createInfiniteQuery(queryOptions) as CreateInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getEventsControllerFindAllQueryOptions = <TData = Awaited<ReturnType<typeof eventsControllerFindAll>>, TError = ErrorType<unknown>>(params: EventsControllerFindAllParams, options?: { query?:CreateQueryOptions<Awaited<ReturnType<typeof eventsControllerFindAll>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getEventsControllerFindAllQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof eventsControllerFindAll>>> = ({ signal }) => eventsControllerFindAll(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as CreateQueryOptions<Awaited<ReturnType<typeof eventsControllerFindAll>>, TError, TData> & { queryKey: QueryKey }
}

export type EventsControllerFindAllQueryResult = NonNullable<Awaited<ReturnType<typeof eventsControllerFindAll>>>
export type EventsControllerFindAllQueryError = ErrorType<unknown>


/**
 * @summary Ïù¥Î≤§Ìä∏ Î™©Î°ù Ï°∞Ìöå
 */

export function createEventsControllerFindAll<TData = Awaited<ReturnType<typeof eventsControllerFindAll>>, TError = ErrorType<unknown>>(
 params: EventsControllerFindAllParams, options?: { query?:CreateQueryOptions<Awaited<ReturnType<typeof eventsControllerFindAll>>, TError, TData>, request?: SecondParameter<typeof customInstance>}

  ): CreateQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getEventsControllerFindAllQueryOptions(params,options)

  const query = createQuery(queryOptions) as CreateQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Îã§Í∞ÄÏò§Îäî Ïù¥Î≤§Ìä∏ Ï°∞Ìöå
 */
export const eventsControllerGetUpcoming = (
    params: EventsControllerGetUpcomingParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/events/upcoming`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getEventsControllerGetUpcomingQueryKey = (params: EventsControllerGetUpcomingParams,) => {
    return [`/events/upcoming`, ...(params ? [params]: [])] as const;
    }

    
export const getEventsControllerGetUpcomingInfiniteQueryOptions = <TData = Awaited<ReturnType<typeof eventsControllerGetUpcoming>>, TError = ErrorType<unknown>>(params: EventsControllerGetUpcomingParams, options?: { query?:CreateInfiniteQueryOptions<Awaited<ReturnType<typeof eventsControllerGetUpcoming>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getEventsControllerGetUpcomingQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof eventsControllerGetUpcoming>>> = ({ signal }) => eventsControllerGetUpcoming(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as CreateInfiniteQueryOptions<Awaited<ReturnType<typeof eventsControllerGetUpcoming>>, TError, TData> & { queryKey: QueryKey }
}

export type EventsControllerGetUpcomingInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof eventsControllerGetUpcoming>>>
export type EventsControllerGetUpcomingInfiniteQueryError = ErrorType<unknown>


/**
 * @summary Îã§Í∞ÄÏò§Îäî Ïù¥Î≤§Ìä∏ Ï°∞Ìöå
 */

export function createEventsControllerGetUpcomingInfinite<TData = Awaited<ReturnType<typeof eventsControllerGetUpcoming>>, TError = ErrorType<unknown>>(
 params: EventsControllerGetUpcomingParams, options?: { query?:CreateInfiniteQueryOptions<Awaited<ReturnType<typeof eventsControllerGetUpcoming>>, TError, TData>, request?: SecondParameter<typeof customInstance>}

  ): CreateInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getEventsControllerGetUpcomingInfiniteQueryOptions(params,options)

  const query = createInfiniteQuery(queryOptions) as CreateInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getEventsControllerGetUpcomingQueryOptions = <TData = Awaited<ReturnType<typeof eventsControllerGetUpcoming>>, TError = ErrorType<unknown>>(params: EventsControllerGetUpcomingParams, options?: { query?:CreateQueryOptions<Awaited<ReturnType<typeof eventsControllerGetUpcoming>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getEventsControllerGetUpcomingQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof eventsControllerGetUpcoming>>> = ({ signal }) => eventsControllerGetUpcoming(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as CreateQueryOptions<Awaited<ReturnType<typeof eventsControllerGetUpcoming>>, TError, TData> & { queryKey: QueryKey }
}

export type EventsControllerGetUpcomingQueryResult = NonNullable<Awaited<ReturnType<typeof eventsControllerGetUpcoming>>>
export type EventsControllerGetUpcomingQueryError = ErrorType<unknown>


/**
 * @summary Îã§Í∞ÄÏò§Îäî Ïù¥Î≤§Ìä∏ Ï°∞Ìöå
 */

export function createEventsControllerGetUpcoming<TData = Awaited<ReturnType<typeof eventsControllerGetUpcoming>>, TError = ErrorType<unknown>>(
 params: EventsControllerGetUpcomingParams, options?: { query?:CreateQueryOptions<Awaited<ReturnType<typeof eventsControllerGetUpcoming>>, TError, TData>, request?: SecondParameter<typeof customInstance>}

  ): CreateQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getEventsControllerGetUpcomingQueryOptions(params,options)

  const query = createQuery(queryOptions) as CreateQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Ïù¥Î≤§Ìä∏ ÏÉÅÏÑ∏ Ï°∞Ìöå
 */
export const eventsControllerFindOne = (
    id: string,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/events/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getEventsControllerFindOneQueryKey = (id: string,) => {
    return [`/events/${id}`] as const;
    }

    
export const getEventsControllerFindOneInfiniteQueryOptions = <TData = Awaited<ReturnType<typeof eventsControllerFindOne>>, TError = ErrorType<unknown>>(id: string, options?: { query?:CreateInfiniteQueryOptions<Awaited<ReturnType<typeof eventsControllerFindOne>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getEventsControllerFindOneQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof eventsControllerFindOne>>> = ({ signal }) => eventsControllerFindOne(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as CreateInfiniteQueryOptions<Awaited<ReturnType<typeof eventsControllerFindOne>>, TError, TData> & { queryKey: QueryKey }
}

export type EventsControllerFindOneInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof eventsControllerFindOne>>>
export type EventsControllerFindOneInfiniteQueryError = ErrorType<unknown>


/**
 * @summary Ïù¥Î≤§Ìä∏ ÏÉÅÏÑ∏ Ï°∞Ìöå
 */

export function createEventsControllerFindOneInfinite<TData = Awaited<ReturnType<typeof eventsControllerFindOne>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:CreateInfiniteQueryOptions<Awaited<ReturnType<typeof eventsControllerFindOne>>, TError, TData>, request?: SecondParameter<typeof customInstance>}

  ): CreateInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getEventsControllerFindOneInfiniteQueryOptions(id,options)

  const query = createInfiniteQuery(queryOptions) as CreateInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getEventsControllerFindOneQueryOptions = <TData = Awaited<ReturnType<typeof eventsControllerFindOne>>, TError = ErrorType<unknown>>(id: string, options?: { query?:CreateQueryOptions<Awaited<ReturnType<typeof eventsControllerFindOne>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getEventsControllerFindOneQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof eventsControllerFindOne>>> = ({ signal }) => eventsControllerFindOne(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as CreateQueryOptions<Awaited<ReturnType<typeof eventsControllerFindOne>>, TError, TData> & { queryKey: QueryKey }
}

export type EventsControllerFindOneQueryResult = NonNullable<Awaited<ReturnType<typeof eventsControllerFindOne>>>
export type EventsControllerFindOneQueryError = ErrorType<unknown>


/**
 * @summary Ïù¥Î≤§Ìä∏ ÏÉÅÏÑ∏ Ï°∞Ìöå
 */

export function createEventsControllerFindOne<TData = Awaited<ReturnType<typeof eventsControllerFindOne>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:CreateQueryOptions<Awaited<ReturnType<typeof eventsControllerFindOne>>, TError, TData>, request?: SecondParameter<typeof customInstance>}

  ): CreateQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getEventsControllerFindOneQueryOptions(id,options)

  const query = createQuery(queryOptions) as CreateQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Ïù¥Î≤§Ìä∏ ÏàòÏ†ï
 */
export const eventsControllerUpdate = (
    id: string,
    updateEventDto: BodyType<UpdateEventDto>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<void>(
      {url: `/events/${id}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: updateEventDto
    },
      options);
    }
  


export const getEventsControllerUpdateMutationOptions = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:CreateMutationOptions<Awaited<ReturnType<typeof eventsControllerUpdate>>, TError,{id: string;data: BodyType<UpdateEventDto>}, TContext>, request?: SecondParameter<typeof customInstance>}
): CreateMutationOptions<Awaited<ReturnType<typeof eventsControllerUpdate>>, TError,{id: string;data: BodyType<UpdateEventDto>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof eventsControllerUpdate>>, {id: string;data: BodyType<UpdateEventDto>}> = (props) => {
          const {id,data} = props ?? {};

          return  eventsControllerUpdate(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type EventsControllerUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof eventsControllerUpdate>>>
    export type EventsControllerUpdateMutationBody = BodyType<UpdateEventDto>
    export type EventsControllerUpdateMutationError = ErrorType<void>

    /**
 * @summary Ïù¥Î≤§Ìä∏ ÏàòÏ†ï
 */
export const createEventsControllerUpdate = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:CreateMutationOptions<Awaited<ReturnType<typeof eventsControllerUpdate>>, TError,{id: string;data: BodyType<UpdateEventDto>}, TContext>, request?: SecondParameter<typeof customInstance>}
): CreateMutationResult<
        Awaited<ReturnType<typeof eventsControllerUpdate>>,
        TError,
        {id: string;data: BodyType<UpdateEventDto>},
        TContext
      > => {

      const mutationOptions = getEventsControllerUpdateMutationOptions(options);

      return createMutation(mutationOptions);
    }
    /**
 * @summary Ïù¥Î≤§Ìä∏ ÏÇ≠Ï†ú
 */
export const eventsControllerRemove = (
    id: string,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<void>(
      {url: `/events/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getEventsControllerRemoveMutationOptions = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:CreateMutationOptions<Awaited<ReturnType<typeof eventsControllerRemove>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof customInstance>}
): CreateMutationOptions<Awaited<ReturnType<typeof eventsControllerRemove>>, TError,{id: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof eventsControllerRemove>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  eventsControllerRemove(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type EventsControllerRemoveMutationResult = NonNullable<Awaited<ReturnType<typeof eventsControllerRemove>>>
    
    export type EventsControllerRemoveMutationError = ErrorType<void>

    /**
 * @summary Ïù¥Î≤§Ìä∏ ÏÇ≠Ï†ú
 */
export const createEventsControllerRemove = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:CreateMutationOptions<Awaited<ReturnType<typeof eventsControllerRemove>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof customInstance>}
): CreateMutationResult<
        Awaited<ReturnType<typeof eventsControllerRemove>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getEventsControllerRemoveMutationOptions(options);

      return createMutation(mutationOptions);
    }
    