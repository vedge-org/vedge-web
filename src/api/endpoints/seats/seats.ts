/**
 * Generated by orval v7.2.0 🍺
 * Do not edit manually.
 * Vedge API
 * 암표 방지 티켓 예매 서비스 Vedge API 문서
 * OpenAPI spec version: 1.0
 */
import {
  createInfiniteQuery,
  createMutation,
  createQuery
} from '@tanstack/svelte-query'
import type {
  CreateInfiniteQueryOptions,
  CreateInfiniteQueryResult,
  CreateMutationOptions,
  CreateMutationResult,
  CreateQueryOptions,
  CreateQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey
} from '@tanstack/svelte-query'
import type {
  CreateSeatMapDto,
  LockSeatDto
} from '../../schemas'
import { customInstance } from '../../mutator/axios';
import type { ErrorType, BodyType } from '../../mutator/axios';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * 관리자가 공연장의 좌석 배치도를 생성합니다.
 * @summary 좌석 배치도 생성
 */
export const seatsControllerCreateSeatMap = (
    createSeatMapDto: BodyType<CreateSeatMapDto>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<void>(
      {url: `/seats/map`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createSeatMapDto
    },
      options);
    }
  


export const getSeatsControllerCreateSeatMapMutationOptions = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:CreateMutationOptions<Awaited<ReturnType<typeof seatsControllerCreateSeatMap>>, TError,{data: BodyType<CreateSeatMapDto>}, TContext>, request?: SecondParameter<typeof customInstance>}
): CreateMutationOptions<Awaited<ReturnType<typeof seatsControllerCreateSeatMap>>, TError,{data: BodyType<CreateSeatMapDto>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof seatsControllerCreateSeatMap>>, {data: BodyType<CreateSeatMapDto>}> = (props) => {
          const {data} = props ?? {};

          return  seatsControllerCreateSeatMap(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SeatsControllerCreateSeatMapMutationResult = NonNullable<Awaited<ReturnType<typeof seatsControllerCreateSeatMap>>>
    export type SeatsControllerCreateSeatMapMutationBody = BodyType<CreateSeatMapDto>
    export type SeatsControllerCreateSeatMapMutationError = ErrorType<void>

    /**
 * @summary 좌석 배치도 생성
 */
export const createSeatsControllerCreateSeatMap = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:CreateMutationOptions<Awaited<ReturnType<typeof seatsControllerCreateSeatMap>>, TError,{data: BodyType<CreateSeatMapDto>}, TContext>, request?: SecondParameter<typeof customInstance>}
): CreateMutationResult<
        Awaited<ReturnType<typeof seatsControllerCreateSeatMap>>,
        TError,
        {data: BodyType<CreateSeatMapDto>},
        TContext
      > => {

      const mutationOptions = getSeatsControllerCreateSeatMapMutationOptions(options);

      return createMutation(mutationOptions);
    }
    /**
 * 특정 공연 일정의 예매 가능한 좌석을 조회합니다.
 * @summary 예매 가능한 좌석 조회
 */
export const seatsControllerGetAvailableSeats = (
    scheduleId: string,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/seats/available/${scheduleId}`, method: 'GET', signal
    },
      options);
    }
  

export const getSeatsControllerGetAvailableSeatsQueryKey = (scheduleId: string,) => {
    return [`/seats/available/${scheduleId}`] as const;
    }

    
export const getSeatsControllerGetAvailableSeatsInfiniteQueryOptions = <TData = Awaited<ReturnType<typeof seatsControllerGetAvailableSeats>>, TError = ErrorType<void>>(scheduleId: string, options?: { query?:CreateInfiniteQueryOptions<Awaited<ReturnType<typeof seatsControllerGetAvailableSeats>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSeatsControllerGetAvailableSeatsQueryKey(scheduleId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof seatsControllerGetAvailableSeats>>> = ({ signal }) => seatsControllerGetAvailableSeats(scheduleId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(scheduleId), ...queryOptions} as CreateInfiniteQueryOptions<Awaited<ReturnType<typeof seatsControllerGetAvailableSeats>>, TError, TData> & { queryKey: QueryKey }
}

export type SeatsControllerGetAvailableSeatsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof seatsControllerGetAvailableSeats>>>
export type SeatsControllerGetAvailableSeatsInfiniteQueryError = ErrorType<void>


/**
 * @summary 예매 가능한 좌석 조회
 */

export function createSeatsControllerGetAvailableSeatsInfinite<TData = Awaited<ReturnType<typeof seatsControllerGetAvailableSeats>>, TError = ErrorType<void>>(
 scheduleId: string, options?: { query?:CreateInfiniteQueryOptions<Awaited<ReturnType<typeof seatsControllerGetAvailableSeats>>, TError, TData>, request?: SecondParameter<typeof customInstance>}

  ): CreateInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getSeatsControllerGetAvailableSeatsInfiniteQueryOptions(scheduleId,options)

  const query = createInfiniteQuery(queryOptions) as CreateInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getSeatsControllerGetAvailableSeatsQueryOptions = <TData = Awaited<ReturnType<typeof seatsControllerGetAvailableSeats>>, TError = ErrorType<void>>(scheduleId: string, options?: { query?:CreateQueryOptions<Awaited<ReturnType<typeof seatsControllerGetAvailableSeats>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSeatsControllerGetAvailableSeatsQueryKey(scheduleId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof seatsControllerGetAvailableSeats>>> = ({ signal }) => seatsControllerGetAvailableSeats(scheduleId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(scheduleId), ...queryOptions} as CreateQueryOptions<Awaited<ReturnType<typeof seatsControllerGetAvailableSeats>>, TError, TData> & { queryKey: QueryKey }
}

export type SeatsControllerGetAvailableSeatsQueryResult = NonNullable<Awaited<ReturnType<typeof seatsControllerGetAvailableSeats>>>
export type SeatsControllerGetAvailableSeatsQueryError = ErrorType<void>


/**
 * @summary 예매 가능한 좌석 조회
 */

export function createSeatsControllerGetAvailableSeats<TData = Awaited<ReturnType<typeof seatsControllerGetAvailableSeats>>, TError = ErrorType<void>>(
 scheduleId: string, options?: { query?:CreateQueryOptions<Awaited<ReturnType<typeof seatsControllerGetAvailableSeats>>, TError, TData>, request?: SecondParameter<typeof customInstance>}

  ): CreateQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getSeatsControllerGetAvailableSeatsQueryOptions(scheduleId,options)

  const query = createQuery(queryOptions) as CreateQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * 예매 진행 중 좌석을 임시로 잠금 처리합니다.
 * @summary 좌석 임시 잠금
 */
export const seatsControllerLockSeats = (
    lockSeatDto: BodyType<LockSeatDto>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<void>(
      {url: `/seats/lock`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: lockSeatDto
    },
      options);
    }
  


export const getSeatsControllerLockSeatsMutationOptions = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:CreateMutationOptions<Awaited<ReturnType<typeof seatsControllerLockSeats>>, TError,{data: BodyType<LockSeatDto>}, TContext>, request?: SecondParameter<typeof customInstance>}
): CreateMutationOptions<Awaited<ReturnType<typeof seatsControllerLockSeats>>, TError,{data: BodyType<LockSeatDto>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof seatsControllerLockSeats>>, {data: BodyType<LockSeatDto>}> = (props) => {
          const {data} = props ?? {};

          return  seatsControllerLockSeats(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SeatsControllerLockSeatsMutationResult = NonNullable<Awaited<ReturnType<typeof seatsControllerLockSeats>>>
    export type SeatsControllerLockSeatsMutationBody = BodyType<LockSeatDto>
    export type SeatsControllerLockSeatsMutationError = ErrorType<void>

    /**
 * @summary 좌석 임시 잠금
 */
export const createSeatsControllerLockSeats = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:CreateMutationOptions<Awaited<ReturnType<typeof seatsControllerLockSeats>>, TError,{data: BodyType<LockSeatDto>}, TContext>, request?: SecondParameter<typeof customInstance>}
): CreateMutationResult<
        Awaited<ReturnType<typeof seatsControllerLockSeats>>,
        TError,
        {data: BodyType<LockSeatDto>},
        TContext
      > => {

      const mutationOptions = getSeatsControllerLockSeatsMutationOptions(options);

      return createMutation(mutationOptions);
    }
    /**
 * 특정 공연 일정의 전체 좌석 배치도를 조회합니다.
 * @summary 좌석 배치도 조회
 */
export const seatsControllerGetSeatMap = (
    scheduleId: string,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/seats/map/${scheduleId}`, method: 'GET', signal
    },
      options);
    }
  

export const getSeatsControllerGetSeatMapQueryKey = (scheduleId: string,) => {
    return [`/seats/map/${scheduleId}`] as const;
    }

    
export const getSeatsControllerGetSeatMapInfiniteQueryOptions = <TData = Awaited<ReturnType<typeof seatsControllerGetSeatMap>>, TError = ErrorType<void>>(scheduleId: string, options?: { query?:CreateInfiniteQueryOptions<Awaited<ReturnType<typeof seatsControllerGetSeatMap>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSeatsControllerGetSeatMapQueryKey(scheduleId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof seatsControllerGetSeatMap>>> = ({ signal }) => seatsControllerGetSeatMap(scheduleId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(scheduleId), ...queryOptions} as CreateInfiniteQueryOptions<Awaited<ReturnType<typeof seatsControllerGetSeatMap>>, TError, TData> & { queryKey: QueryKey }
}

export type SeatsControllerGetSeatMapInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof seatsControllerGetSeatMap>>>
export type SeatsControllerGetSeatMapInfiniteQueryError = ErrorType<void>


/**
 * @summary 좌석 배치도 조회
 */

export function createSeatsControllerGetSeatMapInfinite<TData = Awaited<ReturnType<typeof seatsControllerGetSeatMap>>, TError = ErrorType<void>>(
 scheduleId: string, options?: { query?:CreateInfiniteQueryOptions<Awaited<ReturnType<typeof seatsControllerGetSeatMap>>, TError, TData>, request?: SecondParameter<typeof customInstance>}

  ): CreateInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getSeatsControllerGetSeatMapInfiniteQueryOptions(scheduleId,options)

  const query = createInfiniteQuery(queryOptions) as CreateInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getSeatsControllerGetSeatMapQueryOptions = <TData = Awaited<ReturnType<typeof seatsControllerGetSeatMap>>, TError = ErrorType<void>>(scheduleId: string, options?: { query?:CreateQueryOptions<Awaited<ReturnType<typeof seatsControllerGetSeatMap>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSeatsControllerGetSeatMapQueryKey(scheduleId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof seatsControllerGetSeatMap>>> = ({ signal }) => seatsControllerGetSeatMap(scheduleId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(scheduleId), ...queryOptions} as CreateQueryOptions<Awaited<ReturnType<typeof seatsControllerGetSeatMap>>, TError, TData> & { queryKey: QueryKey }
}

export type SeatsControllerGetSeatMapQueryResult = NonNullable<Awaited<ReturnType<typeof seatsControllerGetSeatMap>>>
export type SeatsControllerGetSeatMapQueryError = ErrorType<void>


/**
 * @summary 좌석 배치도 조회
 */

export function createSeatsControllerGetSeatMap<TData = Awaited<ReturnType<typeof seatsControllerGetSeatMap>>, TError = ErrorType<void>>(
 scheduleId: string, options?: { query?:CreateQueryOptions<Awaited<ReturnType<typeof seatsControllerGetSeatMap>>, TError, TData>, request?: SecondParameter<typeof customInstance>}

  ): CreateQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getSeatsControllerGetSeatMapQueryOptions(scheduleId,options)

  const query = createQuery(queryOptions) as CreateQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * 개별 좌석의 상세 정보를 조회합니다.
 * @summary 좌석 상세 정보 조회
 */
export const seatsControllerGetSeatDetails = (
    seatId: string,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/seats/${seatId}`, method: 'GET', signal
    },
      options);
    }
  

export const getSeatsControllerGetSeatDetailsQueryKey = (seatId: string,) => {
    return [`/seats/${seatId}`] as const;
    }

    
export const getSeatsControllerGetSeatDetailsInfiniteQueryOptions = <TData = Awaited<ReturnType<typeof seatsControllerGetSeatDetails>>, TError = ErrorType<void>>(seatId: string, options?: { query?:CreateInfiniteQueryOptions<Awaited<ReturnType<typeof seatsControllerGetSeatDetails>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSeatsControllerGetSeatDetailsQueryKey(seatId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof seatsControllerGetSeatDetails>>> = ({ signal }) => seatsControllerGetSeatDetails(seatId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(seatId), ...queryOptions} as CreateInfiniteQueryOptions<Awaited<ReturnType<typeof seatsControllerGetSeatDetails>>, TError, TData> & { queryKey: QueryKey }
}

export type SeatsControllerGetSeatDetailsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof seatsControllerGetSeatDetails>>>
export type SeatsControllerGetSeatDetailsInfiniteQueryError = ErrorType<void>


/**
 * @summary 좌석 상세 정보 조회
 */

export function createSeatsControllerGetSeatDetailsInfinite<TData = Awaited<ReturnType<typeof seatsControllerGetSeatDetails>>, TError = ErrorType<void>>(
 seatId: string, options?: { query?:CreateInfiniteQueryOptions<Awaited<ReturnType<typeof seatsControllerGetSeatDetails>>, TError, TData>, request?: SecondParameter<typeof customInstance>}

  ): CreateInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getSeatsControllerGetSeatDetailsInfiniteQueryOptions(seatId,options)

  const query = createInfiniteQuery(queryOptions) as CreateInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getSeatsControllerGetSeatDetailsQueryOptions = <TData = Awaited<ReturnType<typeof seatsControllerGetSeatDetails>>, TError = ErrorType<void>>(seatId: string, options?: { query?:CreateQueryOptions<Awaited<ReturnType<typeof seatsControllerGetSeatDetails>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSeatsControllerGetSeatDetailsQueryKey(seatId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof seatsControllerGetSeatDetails>>> = ({ signal }) => seatsControllerGetSeatDetails(seatId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(seatId), ...queryOptions} as CreateQueryOptions<Awaited<ReturnType<typeof seatsControllerGetSeatDetails>>, TError, TData> & { queryKey: QueryKey }
}

export type SeatsControllerGetSeatDetailsQueryResult = NonNullable<Awaited<ReturnType<typeof seatsControllerGetSeatDetails>>>
export type SeatsControllerGetSeatDetailsQueryError = ErrorType<void>


/**
 * @summary 좌석 상세 정보 조회
 */

export function createSeatsControllerGetSeatDetails<TData = Awaited<ReturnType<typeof seatsControllerGetSeatDetails>>, TError = ErrorType<void>>(
 seatId: string, options?: { query?:CreateQueryOptions<Awaited<ReturnType<typeof seatsControllerGetSeatDetails>>, TError, TData>, request?: SecondParameter<typeof customInstance>}

  ): CreateQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getSeatsControllerGetSeatDetailsQueryOptions(seatId,options)

  const query = createQuery(queryOptions) as CreateQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



