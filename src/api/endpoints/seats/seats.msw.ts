/**
 * Generated by orval v7.2.0 üç∫
 * Do not edit manually.
 * Vedge API
 * ÏïîÌëú Î∞©ÏßÄ Ìã∞Ïºì ÏòàÎß§ ÏÑúÎπÑÏä§ Vedge API Î¨∏ÏÑú
 * OpenAPI spec version: 1.0
 */
import {
  HttpResponse,
  delay,
  http
} from 'msw'


export const getSeatsControllerCreateSeatMapMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void)) => {
  return http.post('*/seats/map', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 201,
        
      })
  })
}

export const getSeatsControllerGetAvailableSeatsMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<void> | void)) => {
  return http.get('*/seats/available/:scheduleId', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getSeatsControllerLockSeatsMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void)) => {
  return http.post('*/seats/lock', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getSeatsControllerGetSeatMapMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<void> | void)) => {
  return http.get('*/seats/map/:scheduleId', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getSeatsControllerGetSeatDetailsMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<void> | void)) => {
  return http.get('*/seats/:seatId', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}
export const getMock = () => [
  getSeatsControllerCreateSeatMapMockHandler(),
  getSeatsControllerGetAvailableSeatsMockHandler(),
  getSeatsControllerLockSeatsMockHandler(),
  getSeatsControllerGetSeatMapMockHandler(),
  getSeatsControllerGetSeatDetailsMockHandler()
]
